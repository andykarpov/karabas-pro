#!/bin/env python3

#########################################################
# Karabas Pro Bin2c converterv1.0                       #
#                                                       #
# (c) 2025 Andy Karpov <andy.karpov@gmail.com>          #
#########################################################

import argparse
import sys
import os
import re
import struct
import datetime

header = """
#include <Arduino.h>

"""

def output_bin(in_name, out_name, h, c):
    basename = os.path.basename(in_name)
    symbol_name = re.sub(r"\W", "_", out_name).upper()
    i = open(in_name, "rb")

    h.write("extern const uint8_t {}[];\n".format(symbol_name))
    h.write("extern const size_t {}_LEN;\n".format(symbol_name))

    c.write("const uint8_t {}[] = {{\n".format(symbol_name))
    while True:
        block = i.read(16)
        if len(block) < 16:
            if len(block):
                c.write("\t")
                for b in block:
                    # Python 2/3 compat
                    if type(b) is str:
                        b = ord(b)
                    c.write("0x{:02X}, ".format(b))
                c.write("\n")
            break
        c.write("\t0x{:02X}, 0x{:02X}, 0x{:02X}, 0x{:02X}, "
                "0x{:02X}, 0x{:02X}, 0x{:02X}, 0x{:02X}, "
                "0x{:02X}, 0x{:02X}, 0x{:02X}, 0x{:02X}, "
                "0x{:02X}, 0x{:02X}, 0x{:02X}, 0x{:02X},\n"
                .format(*struct.unpack("BBBBBBBBBBBBBBBB", block)))
    i.close()
    c.write("};\n")
    c.write("const size_t {0}_LEN = sizeof({0});\n".format(symbol_name))


def output_set(out_name, in_names):
    h = open(out_name + ".h", "w")
    hname = re.sub(r"\W", "_", out_name).upper()
    h.write("#ifndef _{0}_H\n#define _{0}_H\n".format(hname))
    h.write(header)

    c = open(out_name + ".c", "w")
    c.write("// generated by bin2c at {}".format(datetime.datetime.now().isoformat(timespec="seconds")))
    c.write(header)

    for in_name in in_names:
        output_bin(in_name, out_name, h, c)

    h.write("\n#endif\n")
    h.close()
    c.close()

def main():
    msg = "Karabas Pro Binary to C converter v1.0"
    parser = argparse.ArgumentParser(description=msg)
    parser.add_argument('bin_file')
    parser.add_argument('output_base')
    args = parser.parse_args()
    output_set(args.output_base, [args.bin_file])
    
if __name__ == "__main__":
    main()

